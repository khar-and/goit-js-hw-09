{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBA6BxC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAM,C,SAAEF,E,MAAUC,GAIxB,OAHAE,QAAQC,IAAI,SACZD,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACL,IAAII,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQJ,GAGRK,EAAOL,EAAI,GAEZD,EAAM,G,CAzCbR,EAAOkB,iBAAiB,UAExB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIC,EAAWC,OAAOnB,EAAQoB,OAC9B,MAAMC,EAAUF,OAAOlB,EAAOmB,OACxBE,EAAYH,OAAOjB,EAASkB,OAElC,GAAIF,EAAW,GAAKG,EAAU,GAAKC,GAAa,EAG1C,YAFJ3B,EAAA4B,OAAOC,QAAQ,sEAKjB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWG,GAAG,EAChCtB,EAAcsB,EAAGP,GAChBQ,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACnBV,EAAA4B,OAAOI,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEhEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA4B,OAAOC,QAAQ,sBAAoBpB,QAAeC,MAAU,IAE7Da,GAAYG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nconst delayEl = document.querySelector('input[name=\"delay\"]')\nconst stepEl = document.querySelector('input[name=\"step\"]')\nconst amountEl = document.querySelector('input[name=\"amount\"]')\n\nformEl.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  let inpDelay = Number(delayEl.value);\n  const inpStep = Number(stepEl.value);\n  const inpAmount = Number(amountEl.value);\n  \n  if (inpDelay < 0 || inpStep < 0 || inpAmount <= 0) {\n    Notify.failure(`❌ \nThe values ​​entered in the text fields must be greater than 0`);\n    return;\n  }\n  \n  for (let i = 0; i < inpAmount; i+=1) {\n    createPromise(i, inpDelay)\n    .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    inpDelay += inpStep;\n     }\n  }\n\n\nfunction createPromise(position, delay) {\n  const obj = { position, delay };\n  console.log(\"Start\");\n  console.log(position);\n  console.log(delay);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(obj);\n      }\n      else {\n        reject(obj);\n      }\n    }, delay);\n  });\n  }\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delayEl","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","obj","console","log","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","inpDelay","Number","value","inpStep","inpAmount","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.e3eb390c.js.map"}