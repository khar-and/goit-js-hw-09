{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAUF,SAASC,cAAc,uBACjCE,EAASH,SAASC,cAAc,sBAChCG,EAAWJ,SAASC,cAAc,wBA6BxC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAM,CAAEF,WAAUC,SAIxB,OAHAE,QAAQC,IAAI,SACZD,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACL,IAAII,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQJ,GAGRK,EAAOL,E,GAERD,E,IAzCPR,EAAOkB,iBAAiB,UAExB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIC,EAAWC,OAAOnB,EAAQoB,OACxBC,EAAUF,OAAOlB,EAAOmB,OACxBE,EAAYH,OAAOjB,EAASkB,OAElC,GAAIF,EAAW,GAAKG,EAAU,GAAKC,GAAa,EAG1C,YAFJ3B,EAAA4B,OAAOC,QAAS,sEAKlB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAWG,GAAG,EACjCtB,EAAcsB,EAAGP,GAChBQ,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACnBV,EAAA4B,OAAOK,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE9DyB,OAAM,SAAAH,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBV,EAAA4B,OAAOC,QAAQ,sBAAqCK,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE3Da,GAAYG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nconst delayEl = document.querySelector('input[name=\"delay\"]')\nconst stepEl = document.querySelector('input[name=\"step\"]')\nconst amountEl = document.querySelector('input[name=\"amount\"]')\n\nformEl.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  let inpDelay = Number(delayEl.value);\n  const inpStep = Number(stepEl.value);\n  const inpAmount = Number(amountEl.value);\n  \n  if (inpDelay < 0 || inpStep < 0 || inpAmount <= 0) {\n    Notify.failure(`❌ \nThe values ​​entered in the text fields must be greater than 0`);\n    return;\n  }\n  \n  for (let i = 1; i <= inpAmount; i+=1) {\n    createPromise(i, inpDelay)\n    .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    inpDelay += inpStep;\n     }\n  }\n\n\nfunction createPromise(position, delay) {\n  const obj = { position, delay };\n  console.log(\"Start\");\n  console.log(position);\n  console.log(delay);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(obj);\n      }\n      else {\n        reject(obj);\n      }\n    }, delay);\n  });\n  }\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","obj","console","log","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","inpDelay","Number","value","inpStep","inpAmount","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.9061add1.js.map"}